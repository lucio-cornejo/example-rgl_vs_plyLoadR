---
title: "Wound evolution"
execute:
  echo: false
  warning: false
format:
  html:
    theme: yeti
    toc: true
    toc-float: true
    highlight-style: pygments
    code-tools: true
    code-fold: true
    code-summary: "Show the code"
---

```{r, setup}
#| include: false
library(rgl)
# Include the rgl graphic into the HTML page
setupKnitr(autoprint = TRUE) 
# Suppress each separate window for rgl graphics
options(rgl.useNULL = TRUE) 

# Paths to the relevant ply files
Mainpath = "./ply-files"
FolderViews = dir(Mainpath)
ViewsNames = stringr::str_sub(FolderViews, start = 10, end = -5L)

patient0_FolderViews = head(FolderViews, 3)
patient0_ViewsNames = head(ViewsNames, 3)

patient1_FolderViews = tail(FolderViews, 2)
patient1_ViewsNames = tail(ViewsNames, 2)
```

## Description

This first graphic, created with rgl, includes a translucent 
mesh, which will lag the page if the user interacts with it.
However, the lag will be subtle, due to the fact that a 
lightweight ply file has been used to create that translucent mesh.

## rgl graphic

```{r, load-ply-files-into-rgl}
#| message: false
#| include: false
m3d <- list()
for (i in 1:length(patient1_FolderViews)) {
  m3d[[i]] <- Rvcg::vcgPlyRead(paste0(Mainpath, "/", patient1_FolderViews[i]))  
}

# Set opacity of graphics
m3d[[1]]$material$alpha <- 1
m3d[[2]]$material$alpha <- 0.2

rgl::close3d()

library(magrittr)
```

```{r, create-rgl-graphic}
#| include: false
# Open and load geometries
rgl::open3d()
bg3d(color = "gray10")
rgl.material(back = "culled", lit = FALSE, shininess = 90)

vistas3D <- list()
for(i in 1:length(patient1_FolderViews)) {
  vistas3D[[i]] <- shade3d(m3d[[i]])
}

# Create rgl widget
widget2 <- rglwidget(elementId = "rglGraphic") %>% 
  toggleWidget(ids = vistas3D[[1]], label = patient1_ViewsNames[1])  

for (i in 2:length(vistas3D)) {
  widget2 <- widget2 %>% 
    toggleWidget(hidden = vistas3D[[i]], label = patient1_ViewsNames[i])
}

widget2 <- widget2 %>% asRow(last = length(patient1_ViewsNames)) 

rgl::close3d()
```

```{r, display-rgl-graphic}
widget2
```

## plyLoadR similar graphic

```{r}
#| echo: true
# Load the same ply files, now via the plyLoadR library
library(plyLoadR)

plyLoadR(
  paths = paste0(Mainpath, "/", patient1_FolderViews),
  localFiles = TRUE,
  elementId = "plyLoadRGraphic1",
  isTransparent = TRUE,
  opacity = list(1, 0.2),
  isWireframe = FALSE
)
```

## plyLoadR: Mesh evolution

```{r}
#| echo: true
# Load ply files with 'aligned' geometries
plyLoadR(
  paths = paste0(Mainpath, "/", patient0_FolderViews),
  localFiles = TRUE,
  elementId = "plyLoadRGraphic2",
  isTransparent = TRUE,
  opacity = 0.5,
  camera = list(
    position = list(x = 23.417, y = -8.950, z = 28.593),
    up = list(x = 0.484, y = 0.615, z = 0.621)
  ),
  controls = list(
    target = list(x = 1.380, y = 1.561, z = 1.450)
  ),
  toggleWidgets = TRUE,
  toggleLabels = c("2020-07-09", "2020-07-17", "2020-07-24")
)
```

<br>
<br>

- Github [repository](https://github.com/lucio-cornejo/rgl-plyLoadR-comparison-example)
for this **demo** .

- Github [repository](https://github.com/lucio-cornejo/plyLoadR/)
of the **plyLoadR** widget used.
